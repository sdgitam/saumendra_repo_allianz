terraform {
 required_providers {
  aws = {
   source = "hashicorp/aws"
  }
 }
}
resource "aws_iam_role" "eks-iam-role" {
 name = "devopsthehardway-eks-iam-role"

 path = "/"

 assume_role_policy = <<EOF
{
 "Version": "2012-10-17",
 "Statement": [
  {
   "Effect": "Allow",
   "Principal": {
    "Service": "eks.amazonaws.com"
   },
   "Action": "sts:AssumeRole"
  }
 ]
}
EOF

}
resource "aws_iam_role_policy_attachment" "AmazonEKSClusterPolicy" {
 policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
 role    = aws_iam_role.eks-iam-role.name
}
resource "aws_iam_role_policy_attachment" "AmazonEC2ContainerRegistryReadOnly-EKS" {
 policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
 role    = aws_iam_role.eks-iam-role.name
}
resource "aws_eks_cluster" "devopsthehardway-eks" {
    name = "devopsthehardway-cluster"
    role_arn = aws_iam_role.eks-iam-role.arn
   
    vpc_config {
     subnet_ids = [var.subnet_id_1, var.subnet_id_2]
    }
   
    depends_on = [
     aws_iam_role.eks-iam-role,
    ]
   }
   resource "aws_iam_role" "workernodes" {
    name = "eks-node-group-example"
   
    assume_role_policy = jsonencode({
     Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
       Service = "ec2.amazonaws.com"
      }
     }]
     Version = "2012-10-17"
    })
   }
   
   resource "aws_iam_role_policy_attachment" "AmazonEKSWorkerNodePolicy" {
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
    role    = aws_iam_role.workernodes.name
   }
   
   resource "aws_iam_role_policy_attachment" "AmazonEKS_CNI_Policy" {
    policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
    role    = aws_iam_role.workernodes.name
}
 
resource "aws_iam_role_policy_attachment" "EC2InstanceProfileForImageBuilderECRContainerBuilds" {
 policy_arn = "arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds"
 role    = aws_iam_role.workernodes.name
}

resource "aws_iam_role_policy_attachment" "AmazonEC2ContainerRegistryReadOnly" {
 policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
 role    = aws_iam_role.workernodes.name
}
resource "aws_eks_node_group" "worker-node-group" {
    cluster_name  = aws_eks_cluster.devopsthehardway-eks.name
    node_group_name = "devopsthehardway-workernodes"
    node_role_arn  = aws_iam_role.workernodes.arn
    subnet_ids   = [var.subnet_id_1, var.subnet_id_2]
    instance_types = ["t3.xlarge"]
   
    scaling_config {
     desired_size = 1
     max_size   = 1
     min_size   = 1
    }
   
    depends_on = [
     aws_iam_role_policy_attachment.AmazonEKSWorkerNodePolicy,
     aws_iam_role_policy_attachment.AmazonEKS_CNI_Policy,
     #aws_iam_role_policy_attachment.AmazonEC2ContainerRegistryReadOnly,
    ]
   }
  
    ]
   }


   #istio install
   
   variable "subnet_id_1" {
    type = string
    default = "subnet-your_first_subnet_id"
   }
   
   variable "subnet_id_2" {
    type = string
    default = "subnet-your_second_subnet_id"
   }

   provider "helm" {
    kubernetes {
      // enter the relevant authentication
    }
  }
  
  locals {
    istio_charts_url = "https://istio-release.storage.googleapis.com/charts"
  }
  
  resource "helm_release" "istio-base" {
    repository       = local.istio_charts_url
    chart            = "base"
    name             = "istio-base"
    namespace        = var.istio-namespace
    version          = "1.12.1"
    create_namespace = true
  }
  
  resource "helm_release" "istiod" {
    repository       = local.istio_charts_url
    chart            = "istiod"
    name             = "istiod"
    namespace        = var.istio-namespace
    create_namespace = true
    version          = "1.12.1"
    depends_on       = [helm_release.istio-base]
  }
  
  resource "kubernetes_namespace" "istio-ingress" {
    metadata {
      labels = {
        istio-injection = "enabled"
      }
  
      name = "istio-ingress"
    }
  }
  
  resource "helm_release" "istio-ingress" {
    repository = local.istio_charts_url
    chart      = "gateway"
    name       = "istio-ingress"
    namespace  = kubernetes_namespace.istio-ingress-label.id
    version    = "1.12.1"
    depends_on = [helm_release.istiod]
  }
  resource "local_file" "setup_istio_config" {
    content = templatefile("${path.module}/istio-operator.tmpl", {
      enableHoldAppUntilProxyStarts = var.hold_app_until_proxy_starts
    })
    filename = "istio-operator.yaml"
  }
  
  resource "null_resource" "install_istio" {
    provisioner "local-exec" {
      command = "istioctl install -f \"istio-operator.yaml\" --kubeconfig ../${var.kubeconfig}"
    }
    depends_on = [local_file.setup_istio_config]
  }
  resource "null_resource" "init_operator" {
    provisioner "local-exec" {
      command = "istioctl operator init --kubeconfig ../${var.kubeconfig}"
    }
  }
  
  resource "kubectl_manifest" "setup_istio" {
    yaml_body = <<YAML
  apiVersion: install.istio.io/v1alpha1
  kind: IstioOperator
  metadata:
      name: istio-setup
      namespace: istio-system
  spec:
    profile: default
    hub: gcr.io/istio-release
    tag: 1.9.2
    components:
      ingressGateways:
        - name: istio-ingressgateway
          enabled: true
    meshConfig:
      defaultConfig:
        holdApplicationUntilProxyStarts: ${var.hold_app_until_proxy_starts}"
  YAML
    depends_on = [null_resource.init_operator]
  }
  resource "helm_release" "istio_base" {
    name       = "istio-base"
    chart      = "./manifests/charts/base"
    namespace  = "istio-system"
  }
  provider "helm" {
    kubernetes {
      config_path = "~/.kube/config"
    }
  }
      
  provider "kubernetes" {
    config_path    = "~/.kube/config"
  }
    
  locals {
    istio_charts_url = "https://istio-release.storage.googleapis.com/charts"
  }
      
  resource "kubernetes_namespace" "istio_system" {
    metadata {
      name = "istio-system"
      labels = {
        istio-injection = "enabled"
      }
    }
  }
      
  resource "helm_release" "istio-base" {
    repository       = local.istio_charts_url
    chart            = "base"
    name             = "istio-base"
    namespace        = kubernetes_namespace.istio_system.metadata.0.name
    version          = ">= 1.12.1"
    timeout          = 120
    cleanup_on_fail  = true
    force_update     = false
  }
      
  resource "helm_release" "istiod" {
    repository       = local.istio_charts_url
    chart            = "istiod"
    name             = "istiod"
    namespace        = kubernetes_namespace.istio_system.metadata.0.name
    version          = ">= 1.12.1"
    timeout          = 120
    cleanup_on_fail  = true
    force_update     = false
    
    set {
      name = "meshConfig.accessLogFile"
      value = "/dev/stdout"
    }
     
    depends_on       = [helm_release.istio-base]
  }
      
  resource "helm_release" "istio-ingress" {
    repository        = local.istio_charts_url
    chart             = "gateway"
    name              = "istio-ingress"
    namespace         = kubernetes_namespace.istio_system.metadata.0.name
    version           = ">= 1.12.1"
    timeout           = 500
    cleanup_on_fail   = true
    force_update      = false
    depends_on        = [helm_release.istiod]
  }